
	
	if (material->hasTexture()) {
		vector<double> first;
		vector<double> second;
		vector<double> third;

		first.push_back(vertices[0].get_x());
		first.push_back(vertices[0].get_y());
		first.push_back(vertices[0].get_z());

		second.push_back(vertices[1].get_x());
		second.push_back(vertices[1].get_y());
		second.push_back(vertices[1].get_z());				

		vector<double> * one = subtract(&first, &second);



		vector<double> * axis_one = normalize(cross_product(&normal, normalize(one)));
		vector<double> * axis_two = normalize(cross_product(&normal, axis_one));
	
		double lengthOne_x = dot_product(one, axis_one);
		double lengthOne_y = dot_product(one, axis_two);

		//`vector<double> * origin = 

		vector<double> texNormal;
		texNormal.push_back(0);
		texNormal.push_back(0);
		texNormal.push_back(1);

		vector<double> texOne;
        vector<double> texTwo;

		texOne.push_back(textureVertices[0]->get_x());
		texOne.push_back(textureVertices[0]->get_y());
		texOne.push_back(0);
                
		texTwo.push_back(textureVertices[1]->get_x());
		texTwo.push_back(textureVertices[1]->get_y());
		texTwo.push_back(0);

		vector<double> * arbitrary = subtract(&texOne, &texTwo);

		vector<double> * img_axis_one = normalize(cross_product(&texNormal, normalize(arbitrary)));
		vector<double> * img_axis_two = normalize(cross_product(&texNormal, img_axis_one);

		double lengthTwo_x = dot_product(arbitrary, img_axis_one);
		double lengthTwo_y = dot_product(arbitrary, img_axis_two);
		
		double img_origin_x = dot_product (&texOne, img_axis_one);
		double img_origin_y = dot_product (&texOne, img_axis_two);
		
		double x_ratio = lengthOne_x/lengthTwo_x;
		double y_ratio = lengthOne_y/lengthTwo_y;
		
		vector<double> * origin = add(scale(axis_one, -x_ratio*img_origin_x), scale(axis_two, -y_ratio*img_origin_y));
		origin = add(origin, first);
		
			
		//double origin_x = subtract (scale(axis_one, texOne[0] * x_ratio), first);
		//double origin_y = texTwo * y_ratio;
		
		//vector<double> * pointVector = subtract(point, 

		return material->color_diffuse(light_color, cos, distOne, distTwo);
	}
	
	return material->color_diffuse(light_color, cos);